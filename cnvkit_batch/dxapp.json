{
  "name": "cnvkit_batch",
  "title": "CNVkit",
  "summary": "Call copy number variants from DNA sequencing, and/or build a reference profile",
  "dxapi": "1.0.0",
  "version": "0.9.5.4",
  "categories": [
    "Structural Variation"
  ],
  "details": {
    "repoUrl": "git@github.com:etal/cnvkit-dnanexus.git",
    "upstreamUrl": "https://github.com/etal/cnvkit/",
    "upstreamVersion": "0.9.5",
    "upstreamLicences": [ "Apache License 2.0" ],
    "upstreamAuthor": "Eric Talevich",
    "contactEmail": [ "etalevich@dnanexus.com" ],
    "citations": [ "doi:10.1371/journal.pcbi.1004873" ]
  },
  "inputSpec": [
    {
      "name": "case_bams",
      "label": "Case/test/tumor sample mapped reads (BAM)",
      "help": "Mapped reads for each case/test/tumor sample, in BAM format. CNVs will be called in these samples.",
      "class": "array:file",
      "patterns": [ "*.bam" ],
      "optional": true
    },
    {
      "name": "normal_bams",
      "label": "Control/normal sample mapped reads (BAM)",
      "help": "Mapped reads for each normal/control sample, in BAM format. Used to construct a new copy number reference. If neither normal_bams nor cn_reference is given, a 'generic' or 'flat' reference will be created with equal expected coverage across the genome.",
      "class": "array:file",
      "patterns": [ "*.bam" ],
      "optional": true
    },
    {
      "name": "snv_vcfs",
      "label": "SNV calls (VCF)",
      "help": "Variant calls for each tumor sample, including germline SNPs. Must be in the same order as the tumor BAMs. See VCF formatting guidelines: https://cnvkit.readthedocs.io/en/stable/fileformats.html#vcf",
      "class": "array:file",
      "patterns": [ "*.vcf", "*.vcf.gz" ],
      "optional": true
    },
    {
      "name": "cn_reference",
      "label": "Copy number reference",
      "help": "Reference profile (.cnn), previously built using CNVkit. If given, this will be used directly to call CNVs in the given tumor samples; none of the other inputs apply in this case.",
      "class": "file",
      "patterns": [ "*.cnn" ],
      "optional": true
    },
    {
      "name": "baits",
      "label": "Baited regions",
      "help": "Baited (tiled, targeted) genomic regions, in BED or GATK/Picard-style interval list format. Required to construct a new reference.",
      "class": "file",
      "patterns": [ "*.bed", "*.list", "*.interval_list" ],
      "optional": true
    },
    {
      "name": "fasta",
      "label": "Reference genome (FASTA)",
      "help": "Reference genomic sequences of all chromosomes, in FASTA format",
      "class": "file",
      "patterns": [ "*.fa", "*.fasta", "*.fa.gz", "*.fasta.gz" ],
      "optional": true
    },
    {
      "name": "annotation",
      "label": "Gene annotation",
      "help": "Genome annotation file, e.g. UCSC refFlat.txt, for gene annotation of your reference genome. Used to apply gene names to targets/baits, if the 'baits' BED file does not have a fourth column of region names.",
      "class": "file",
      "patterns": [ "*.bed", "*.gff", "*.txt" ],
      "optional": true
    },
    {
      "name": "method",
      "label": "Sequencing method",
      "help": "Target capture method, if any: 'hybrid' (hybridization capture; the default), 'amplicon' (targeted amplicon capture), or 'wgs' (whole genome sequencing -- no capture step)",
      "class": "string",
      "choices": ["wgs", "amplicon", "hybrid"],
      "default": "hybrid",
      "optional": true
    },
    {
      "name": "haploid_x_reference",
      "label": "Assume chrX is haploid?",
      "help": "If true, assume or create a reference where chromosome X is haploid, rather than the default diploid. This option can be used to emulate some array CGH platforms.",
      "class": "boolean",
      "default": false,
      "optional": true
    },
    {
      "name": "drop_low_coverage",
      "label": "Filter out very-low-coverage bins?",
      "help": "Recommended for tumor samples, where very-low-coverage bins generally indicate poorly sequenced regions rather than copy number. This option removes those bins before segmentation.",
      "class": "boolean",
      "default": false,
      "optional": true
    },
    {
      "name": "exclude_access",
      "label": "Regions to exclude from off-target bins",
      "class": "array:file",
      "optional": true
    },
    {
      "name": "antitarget_avg_size",
      "label": "Average off-target bin size",
      "class": "int",
      "optional": true
    },
    {
      "name": "target_avg_size",
      "label": "Average on-target bin size",
      "class": "int",
      "optional": true
    },
    {
      "name": "purity",
      "label": "Estimated tumor purity",
      "help": "Fraction, 0--1, of cells in each test sample that are lesional, rather than immune or normal-cell contamination. For germline samples, this is 1.0 and does not need to be specified.",
      "class": "array:float",
      "optional": true
    },
    {
      "name": "ploidy",
      "label": "Autosome ploidy",
      "help": "Number of copies of each chromosome expected in normal cells (excluding sex chromosomes and mitochondria). For humans, this is 2.",
      "class": "array:int",
      "optional": true
    },
    {
      "name": "do_parallel",
      "label": "Parallelize?",
      "help": "Run the pipeline on all available CPUs in parallel. Turn this off if you experience app crashes.",
      "class": "boolean",
      "default": true,
      "optional": true
    }
  ],
  "outputSpec": [
    {
      "name": "cn_reference",
      "label": "Copy number reference (.cnn)",
      "class": "file"
    },
    {
      "name": "copy_ratios",
      "label": "Copy ratios (.cnr)",
      "class": "array:file",
      "optional": true
    },
    {
      "name": "copy_segments",
      "label": "Copy segments (.cns)",
      "help": "Segmentation of the bin-level copy ratios (.cnr), with no further processing.",
      "class": "array:file",
      "optional": true
    },
    {
      "name": "call_segments",
      "label": "Filtered segments (.cns)",
      "help": "Copy segments re-centered and filtered for 50% confidence interval versus neutral copy number. Integer copy numbers are rough estimates and can be improved by supplying 'purity' input values.",
      "class": "array:file",
      "optional": true
    },
    {
      "name": "genemetrics",
      "label": "Gain/loss tables (.csv)",
      "help": "Lists of genes putatively gained or lost in each sample, as detected in the filtered segments (call_segments).",
      "class": "array:file",
      "optional": true
    },
    {
      "name": "cnv_vcfs",
      "label": "VCF files",
      "help": "Each sample's CNV segments in VCF format.",
      "class": "array:file",
      "optional": true
    },
    {
      "name": "cnv_nexus",
      "label": "VCF files",
      "help": "Each sample's CNV segments in BioDiscovery Nexus Copy Number format ('Custom OGT' or 'basic').",
      "class": "array:file",
      "optional": true
    },
    {
      "name": "seg",
      "label": "SEG table",
      "help": "All samples' CNV segments in SEG format, for use with other programs",
      "class": "file",
      "optional": true
    },
    {
      "name": "metrics",
      "label": "Bin variance metrics (.csv)",
      "class": "file",
      "optional": true
    },
    {
      "name": "sexes",
      "label": "Sample sexes (guessed)",
      "help": "Chromosomal sex of each sample, inferred from X- and Y-chromosome coverages",
      "class": "file",
      "optional": true
    },
    {
      "name": "heatmap_pdf",
      "label": "Heatmap plot (PDF)",
      "class": "file",
      "optional": true
    },
    {
      "name": "scatters_png",
      "label": "Genome plot(s) (PNG)",
      "help": "Scatter plot(s) of genome-wide copy number profile, one per test sample.",
      "class": "array:file",
      "optional": true
    },
    {
      "name": "diagrams_pdf",
      "label": "Chromosome ideogram(s) (PDF)",
      "class": "array:file",
      "optional": true
    }
  ],
  "runSpec": {
    "interpreter": "python2.7",
    "file": "src/code.py",
    "distribution":  "Ubuntu",
    "release":  "16.04",
    "execDepends": [
    ]
  },
  "regionalOptions": {
    "azure:westus": {
        "systemRequirements": {"*": {"instanceType": "azure:mem1_ssd1_x8"}},
        "assetDepends": [{"id": "record-FJjQQ3j9VPPzxXGGJxQ9j993"}]
    },
    "aws:us-east-1": {
        "systemRequirements": {"*": {"instanceType": "mem1_ssd1_x8"}},
        "assetDepends": [{"id": "record-FJjQ8vQ0g011J4Y38k25xBxz"}]
    },
    "aws:cn-north-1": {
        "systemRequirements": {"*": {"instanceType": "mem1_ssd1_x8"}},
        "assetDepends": [{"id": "record-FJjQPG82P5FFp4KvBb2XbBQY"}]
    }
  },
  "openSource": true,
  "developers": [
    "user-etalevich"
  ],
  "authorizedUsers": ["PUBLIC"]
}
