{
  "name": "cnvkit_batch",
  "title": "CNVkit",
  "summary": "Call copy number variants from DNA sequencing, and/or build a reference profile",
  "dxapi": "1.0.0",
  "version": "0.8.2",
  "categories": [
    "Structural Variation"
  ],
  "details": {
    "repoUrl": "git@github.com:etal/cnvkit-dnanexus.git",
    "upstreamUrl": "https://github.com/etal/cnvkit/",
    "upstreamVersion": "0.8.2",
    "upstreamLicences": [ "Apache License 2.0" ],
    "upstreamAuthor": "Eric Talevich",
    "contactEmail": [ "eric.talevich@ucsf.edu" ],
    "citations": [ "doi:10.1371/journal.pcbi.1004873" ]
  },
  "inputSpec": [
    {
      "name": "tumor_bams",
      "label": "Tumor sample mapped reads (BAM)",
      "help": "Mapped reads for each tumor/test sample, in BAM format. CNVs will be called in these samples.",
      "class": "array:file",
      "patterns": [ "*.bam" ],
      "optional": true
    },
    {
      "name": "normal_bams",
      "label": "Normal sample mapped reads (BAM)",
      "help": "Mapped reads for each normal/control sample, in BAM format. Used to construct a new copy number reference. If neither normal_bams nor cn_reference is given, a 'generic' or 'flat' reference will be created with equal expected coverage across the genome.",
      "class": "array:file",
      "patterns": [ "*.bam" ],
      "optional": true
    },
    {
      "name": "cn_reference",
      "label": "Copy number reference",
      "help": "Reference profile (.cnn), previously built using CNVkit. If given, this will be used directly to call CNVs in the given tumor samples; none of the other inputs apply in this case.",
      "class": "file",
      "patterns": [ "*.cnn" ],
      "optional": true
    },
    {
      "name": "baits",
      "label": "Baited regions",
      "help": "Baited (tiled, targeted) genomic regions, in BED or GATK/Picard-style interval list format. Required to construct a new reference.",
      "class": "file",
      "patterns": [ "*.bed", "*.list", "*.interval_list" ],
      "optional": true
    },
    {
      "name": "fasta",
      "label": "Reference genome (FASTA)",
      "help": "Reference genomic sequences of all chromosomes, in FASTA format",
      "class": "file",
      "patterns": [ "*.fa", "*.fasta", "*.fa.gz", "*.fasta.gz" ],
      "optional": true
    },
    {
      "name": "annotation",
      "label": "Gene annotation",
      "help": "UCSC genome annotation database file, e.g. refFlat.txt for the RefSeq annotation of your reference genome. Used to apply gene names to targets/baits, if the 'baits' BED file does not have a fourth column of region names.",
      "class": "file",
      "patterns": [ "*.txt" ],
      "optional": true
    },
    {
      "name": "method",
      "label": "Sequencing method",
      "help": "Target capture method, if any: 'hybrid' (hybridization capture; the default), 'amplicon' (targeted amplicon capture), or 'wgs' (whole genome sequencing -- no capture step)",
      "class": "string",
      "choices": ["wgs", "amplicon", "hybrid"],
      "default": "hybrid",
      "optional": true
    },
    {
      "name": "is_male_normal",
      "label": "Male reference?",
      "help": "Assume or create a male-normal reference? Determines the expected chrX ploidy.",
      "class": "boolean",
      "default": true,
      "optional": true
    },
    {
      "name": "drop_low_coverage",
      "label": "Drop low-coverage bins?",
      "help": "In tumor samples, very-low-coverage bins generally indicate poorly sequenced regions rather than copy number. This option removes those bins before segmentation.",
      "class": "boolean",
      "default": false,
      "optional": true
    },
    {
      "name": "antitarget_avg_size",
      "label": "Average off-target bin size",
      "class": "int",
      "default": 150000,
      "optional": true
    },
    {
      "name": "target_avg_size",
      "label": "Average on-target bin size",
      "class": "int",
      "default": 267,
      "optional": true
    },
    {
      "name": "do_parallel",
      "label": "Parallelize?",
      "help": "Run the pipeline on all available CPUs in parallel. Turn this off if you experience app crashes.",
      "class": "boolean",
      "default": true,
      "optional": true
    }
  ],
  "outputSpec": [
    {
      "name": "cn_reference",
      "label": "Copy number reference (.cnn)",
      "class": "file"
    },
    {
      "name": "copy_ratios",
      "label": "Copy ratios (.cnr)",
      "class": "array:file",
      "optional": true
    },
    {
      "name": "copy_segments",
      "label": "Copy segments (.cns)",
      "class": "array:file",
      "optional": true
    },
    {
      "name": "gainloss",
      "label": "Gain/loss tables (.csv)",
      "help": "Lists of genes putatively gained or lost in each sample",
      "class": "array:file",
      "optional": true
    },
    {
      "name": "breaks",
      "label": "Breakpoints tables (.csv)",
      "help": "Lists of genes containing possible breakpoints in each sample",
      "class": "array:file",
      "optional": true
    },
    {
      "name": "seg",
      "label": "SEG table",
      "help": "All samples' CNV segments in SEG format, for use with other programs",
      "class": "file",
      "optional": true
    },
    {
      "name": "metrics",
      "label": "Bin variance metrics (.csv)",
      "class": "file",
      "optional": true
    },
    {
      "name": "genders",
      "label": "Genders (guessed)",
      "class": "file",
      "optional": true
    },
    {
      "name": "scatter_pdf",
      "label": "Genome plot(s) (PDF)",
      "class": "file",
      "optional": true
    },
    {
      "name": "diagram_pdf",
      "label": "Chromosome ideogram(s) (PDF)",
      "class": "file",
      "optional": true
    }
  ],
  "runSpec": {
    "interpreter": "python2.7",
    "file": "src/code.py",
    "execDepends": [
      {"name": "poppler-utils"}
    ],
    "assetDepends": [{"id": "record-F1QgVF00K2XPY92JPPPyZ0Y9"}],
    "distribution":  "Ubuntu",
    "release":  "14.04",
    "systemRequirements": {
        "main": {"instanceType": "mem2_ssd1_x8"}
    }
  },
  "openSource": true,
  "access": {
    "network": ["*"]
  },
  "authorizedUsers": ["PUBLIC"]
}
